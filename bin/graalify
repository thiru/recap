#!/usr/bin/env bash

# Build a static, self-contained executable using GraalVM's native-image tool.
#
# See this link for a reference of native-image options:
# https://www.graalvm.org/latest/reference-manual/native-image/overview/BuildOptions/
#
# Additionally, this self-contained executable is also statically linked meaning that it does not
# depend on any external libraries whatsoever. See the following link for more details:
# https://www.graalvm.org/latest/reference-manual/native-image/guides/build-static-executables/

if ! command -v native-image &> /dev/null; then
  echo 'GraalVM native-image command not found'
  exit 1
fi

if [ ! -n "${MUSL_HOME:-}" ]; then
    echo "MUSL_HOME is either unset or empty"
    exit 1
fi

PATH="$MUSL_HOME/bin:$PATH"

SRC_NS=recap.main
TARGET_FILE=target/recap

echo "Building static, self-contained executable ($SRC_NS -> $TARGET_FILE)..."
echo

# Java compiled classes will be placed in this directory:
mkdir -p classes

# Binary will be placed within this directory:
mkdir -p target

# Compile Clojure:
clojure -J-Dclojure.spec.compile-asserts=false -M -e "(compile '$SRC_NS)"

# Build stand-alone binary:
native-image \
  -cp "$(clojure -Spath):classes" \
  -H:+ReportExceptionStackTraces \
  -J-Dclojure.spec.skip-macros=true \
  -J-Dclojure.spec.compile-asserts=false \
  -J-Dclojure.compiler.direct-linking=true \
  --initialize-at-build-time \
  --enable-http \
  --enable-https \
  "--enable-all-security-services" \
  --install-exit-handlers \
  --diagnostics-mode \
  --verbose \
  --no-fallback \
  --report-unsupported-elements-at-runtime \
  --static --libc=musl \
  "-J-Xmx16g" \
  -o "$TARGET_FILE" \
  $SRC_NS

# Explanation of some of the args above:

# -march=native
# Increased performance at the cost of compatibility

# --initialize-at-build-time
# This is needed for Clojure or else there will be strange errors

# --install-exit-handlers
# Handle signals like the JVM does (allowing shutdown hooks)

# --diagnostics-mode
# Since GraalVM 22.0 this is needed in order to use the
# --initialize-at-build-time option without arguments

# --static --libc=musl
# Build statically linked binary (no dependencies)

# --no-fallback
# If native compilation fails, without this, it will create a fallback image
# which is a full JVM to run your program (don't want this typically).

# --no-server
# Without this GraalVM will start a backgroud server that will be used next
# time

# --report-unsupported-elements-at-runtime
# Handle unsupported elements/methods properly

# "-J-Xmx16g"
# Limit GraalVM to the specified amount of RAM. More memory results in faster
# builds but will an error out if you don't have enough RAM.
